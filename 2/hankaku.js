// Generated by CoffeeScript 1.4.0
(function() {
  var code, hanAlpha, hanKana, hanNumber, han_fp, han_sp, isAlnum, isAlpha, isDigit, isHanKana, split_fp, split_sp, zenAlpha, zenKana, zenNumber, zen_fp, zen_sp,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  hanKana = ["ｳﾞ", "ｶﾞ", "ｷﾞ", "ｸﾞ", "ｹﾞ", "ｺﾞ", "ｻﾞ", "ｼﾞ", "ｽﾞ", "ｾﾞ", "ｿﾞ", "ﾀﾞ", "ﾁﾞ", "ﾂﾞ", "ﾃﾞ", "ﾄﾞ", "ﾊﾞ", "ﾋﾞ", "ﾌﾞ", "ﾍﾞ", "ﾎﾞ", "ﾊﾟ", "ﾋﾟ", "ﾌﾟ", "ﾍﾟ", "ﾎﾟ", "ﾞ", "｡", "｢", "｣", "､", "･", "ｦ", "ｧ", "ｨ", "ｩ", "ｪ", "ｫ", "ｬ", "ｭ", "ｮ", "ｯ", "ｰ", "ｱ", "ｲ", "ｳ", "ｴ", "ｵ", "ｶ", "ｷ", "ｸ", "ｹ", "ｺ", "ｻ", "ｼ", "ｽ", "ｾ", "ｿ", "ﾀ", "ﾁ", "ﾂ", "ﾃ", "ﾄ", "ﾅ", "ﾆ", "ﾇ", "ﾈ", "ﾉ", "ﾊ", "ﾋ", "ﾌ", "ﾍ", "ﾎ", "ﾏ", "ﾐ", "ﾑ", "ﾒ", "ﾓ", "ﾔ", "ﾕ", "ﾖ", "ﾗ", "ﾘ", "ﾙ", "ﾚ", "ﾛ", "ﾜ", "ﾝ", "ﾟ"];

  zenKana = ["ヴ", "ガ", "ギ", "グ", "ゲ", "ゴ", "ザ", "ジ", "ズ", "ゼ", "ゾ", "ダ", "ヂ", "ヅ", "デ", "ド", "バ", "ビ", "ブ", "ベ", "ボ", "パ", "ピ", "プ", "ペ", "ポ", "゛", "。", "「", "」", "、", "・", "ヲ", "ァ", "ィ", "ゥ", "ェ", "ォ", "ャ", "ュ", "ョ", "ッ", "ー", "ア", "イ", "ウ", "エ", "オ", "カ", "キ", "ク", "ケ", "コ", "サ", "シ", "ス", "セ", "ソ", "タ", "チ", "ツ", "テ", "ト", "ナ", "ニ", "ヌ", "ネ", "ノ", "ハ", "ヒ", "フ", "ヘ", "ホ", "マ", "ミ", "ム", "メ", "モ", "ヤ", "ユ", "ヨ", "ラ", "リ", "ル", "レ", "ロ", "ワ", "ン", "゜"];

  hanNumber = (function() {
    var _i, _results;
    _results = [];
    for (code = _i = 48; _i <= 57; code = ++_i) {
      _results.push(String.fromCharCode(code));
    }
    return _results;
  })();

  zenNumber = (function() {
    var _i, _results;
    _results = [];
    for (code = _i = 65296; _i <= 65305; code = ++_i) {
      _results.push(String.fromCharCode(code));
    }
    return _results;
  })();

  hanAlpha = (function() {
    var _i, _j, _k, _len, _ref, _results, _results1, _results2;
    _ref = (function() {
      _results2 = [];
      for (_k = 97; _k <= 122; _k++){ _results2.push(_k); }
      return _results2;
    }).apply(this).concat((function() {
      _results1 = [];
      for (_j = 65; _j <= 90; _j++){ _results1.push(_j); }
      return _results1;
    }).apply(this));
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      code = _ref[_i];
      _results.push(String.fromCharCode(code));
    }
    return _results;
  })();

  zenAlpha = (function() {
    var _i, _j, _k, _len, _ref, _results, _results1, _results2;
    _ref = (function() {
      _results2 = [];
      for (_k = 65345; _k <= 65370; _k++){ _results2.push(_k); }
      return _results2;
    }).apply(this).concat((function() {
      _results1 = [];
      for (_j = 65313; _j <= 65338; _j++){ _results1.push(_j); }
      return _results1;
    }).apply(this));
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      code = _ref[_i];
      _results.push(String.fromCharCode(code));
    }
    return _results;
  })();

  han_fp = hanKana.concat(hanNumber, hanAlpha);

  zen_fp = zenKana.concat(zenNumber, zenAlpha);

  han_sp = hanNumber.concat(hanAlpha);

  zen_sp = zenNumber.concat(zenAlpha);

  $(function() {
    return $("#src").keyup(function(e) {
      var fp_str, me, sp_str, val;
      me = $("#src");
      val = me.val();
      $("#len").html(val.length);
      fp_str = split_fp(val, 24);
      $("#fp").val(fp_str);
      sp_str = split_sp(val, 40);
      return $("#sp").val(sp_str);
    });
  });

  split_fp = function(val, limit) {
    var byte, char, charIdx, count, idx, length, line, lines, _i, _ref;
    length = val.length;
    lines = [];
    line = [];
    count = 0;
    for (idx = _i = 0, _ref = length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
      char = val.charAt(idx);
      charIdx = zen_fp.indexOf(char);
      if (charIdx !== -1) {
        char = han_fp[charIdx];
        if (char.length > 1) {
          byte = 2;
        } else {
          byte = 1;
        }
      } else {
        if (__indexOf.call(han_fp, char) >= 0) {
          byte = 1;
        } else {
          byte = 2;
        }
      }
      count += byte;
      if (count > limit) {
        count = byte;
        lines.push(line.slice(0));
        line = [];
      }
      line.push(char);
      console.log(byte, char, count, limit);
    }
    lines.push(line);
    lines = (function() {
      var _j, _len, _results;
      _results = [];
      for (_j = 0, _len = lines.length; _j < _len; _j++) {
        line = lines[_j];
        _results.push(line.join(""));
      }
      return _results;
    })();
    return lines.join("<br />\n");
  };

  split_sp = function(val, limit) {
    var byte, char, charIdx, count, idx, length, line, lines, _i, _ref;
    length = val.length;
    lines = [];
    line = [];
    count = 0;
    for (idx = _i = 0, _ref = length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; idx = 0 <= _ref ? ++_i : --_i) {
      char = val.charAt(idx);
      charIdx = zen_sp.indexOf(char);
      if (charIdx !== -1) {
        char = han_sp[charIdx];
        if (char.length > 1) {
          byte = 2;
        } else {
          byte = 1;
        }
      } else {
        if (__indexOf.call(han_sp, char) >= 0) {
          byte = 1;
        } else {
          byte = 2;
        }
      }
      count += byte;
      if (count > limit) {
        count = byte;
        lines.push(line.slice(0));
        line = [];
      }
      line.push(char);
    }
    lines.push(line);
    lines = (function() {
      var _j, _len, _results;
      _results = [];
      for (_j = 0, _len = lines.length; _j < _len; _j++) {
        line = lines[_j];
        _results.push(line.join(""));
      }
      return _results;
    })();
    return lines.join("<br />\n");
  };

  isAlnum = function(aChar) {
    return isDigit(aChar) || isAlpha(aChar);
  };

  isDigit = function(aChar) {
    var myCharCode;
    myCharCode = aChar.charCodeAt(0);
    return (47 < myCharCode && myCharCode < 58);
  };

  isAlpha = function(aChar) {
    var myCharCode;
    myCharCode = aChar.charCodeAt(0);
    return (64 < myCharCode && myCharCode < 91) || (96 < myCharCode && myCharCode < 123);
  };

  isHanKana = function(aChar) {
    return __indexOf.call(hanKana, aChar) >= 0;
  };

}).call(this);
